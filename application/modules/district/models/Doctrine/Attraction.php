<?php

/**
 * District_Model_Doctrine_Attraction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Admi
 * @subpackage District
 * @author     MichaÅ‚ Folga <michalfolga@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class District_Model_Doctrine_Attraction extends District_Model_Doctrine_BaseAttraction
{
     public static $attractionPhotoDimensions = array(
        '126x126' => 'Photo in admin panel',                  // admin
        '610x292' => 'Big photo(610x292)',
        '67x45' => 'Miniature photo(67x45)',
        '256x122' => 'Small photo(256x122)',
        '130x130' => 'Photo in gallery(130x130)',
        '400x' => 'Backup photo(400x)',
    );
    
    public static function getAttractionPhotoDimensions() {
        return self::$attractionPhotoDimensions;
    }
    
     public function setId($id) {
        $this->_set('id', $id);
    }
    
    public function getId() {
        return $this->_get('id');
    }
    
    public function setPublish($publish = true) {
        $this->_set('publish', $publish);
    }
    
    public function isPublish() {
        return $this->_get('publish');
    }
    
    public function setPublishDate($publishDate) {
        $this->_set('publish_date', $publishDate);
    }
    public function setCreated($value) {
        $this->_set('created_at', $value);
    }
    
    public function getPublishDate() {
        return $this->_get('publish_date');
    }
    
    public function getMetatagId() {
        return $this->_get('metatag_id');    
    }
    
    
    public function setUp() {
        parent::setUp();
        $this->hasOne('Media_Model_Doctrine_Photo as PhotoRoot', array(
            'local' => 'photo_root_id',
            'foreign' => 'id'
        ));
        
     
        
         $this->hasOne('Media_Model_Doctrine_VideoUrl as VideoRoot', array(
            'local' => 'video_root_id',
            'foreign' => 'id'
        ));

        $this->hasMany('Media_Model_Doctrine_Photo as Photos', array(
            'local' => 'photo_root_id',
            'foreign' => 'root_id'
        ));
        $this->hasOne('Default_Model_Doctrine_Metatag as Metatags', array(
            'local' => 'metatag_id',
            'foregin' => 'id'
        ));
        
        
         $this->hasOne('User_Model_Doctrine_User as UserCreated', array(
             'local' => 'user_id',
             'foreign' => 'id'));
        
        $this->hasOne('User_Model_Doctrine_User as UserUpdated', array(
             'local' => 'last_user_id',
             'foreign' => 'id'));
         
    }
}